import { Web3APISpec } from 'web3-types';
import { DataFormat } from 'web3-utils';
import { Web3RequestManager } from './web3_request_manager';
import { Web3SubscriptionConstructor } from './web3_subscriptions';
declare type ShouldUnsubscribeCondition = ({ id, sub, }: {
    id: string;
    sub: unknown;
}) => boolean | undefined;
export declare class Web3SubscriptionManager<API extends Web3APISpec, RegisteredSubs extends {
    [key: string]: Web3SubscriptionConstructor<API>;
}> {
    readonly requestManager: Web3RequestManager<API>;
    readonly registeredSubscriptions: RegisteredSubs;
    private readonly _subscriptions;
    constructor(requestManager: Web3RequestManager<API>, registeredSubscriptions: RegisteredSubs);
    subscribe<T extends keyof RegisteredSubs>(name: T, args?: ConstructorParameters<RegisteredSubs[T]>[0], returnFormat?: DataFormat): Promise<InstanceType<RegisteredSubs[T]>>;
    get subscriptions(): Map<string, InstanceType<RegisteredSubs[keyof RegisteredSubs]>>;
    addSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>): Promise<void>;
    removeSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>): Promise<string>;
    unsubscribe(condition?: ShouldUnsubscribeCondition): Promise<string[]>;
    clear(): void;
    supportsSubscriptions(): boolean;
}
export {};
//# sourceMappingURL=web3_subscription_manager.d.ts.map