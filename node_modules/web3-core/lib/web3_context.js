"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3EthPluginBase = exports.Web3PluginBase = exports.Web3Context = void 0;
const web3_utils_1 = require("web3-utils");
const web3_errors_1 = require("web3-errors");
const utils_1 = require("./utils");
const web3_config_1 = require("./web3_config");
const web3_request_manager_1 = require("./web3_request_manager");
const web3_subscription_manager_1 = require("./web3_subscription_manager");
const web3_batch_request_1 = require("./web3_batch_request");
class Web3Context extends web3_config_1.Web3Config {
    constructor(providerOrContext) {
        var _a;
        super();
        this.providers = web3_request_manager_1.Web3RequestManager.providers;
        if ((0, web3_utils_1.isNullish)(providerOrContext) ||
            (typeof providerOrContext === 'string' && providerOrContext.trim() !== '') ||
            (0, utils_1.isSupportedProvider)(providerOrContext)) {
            this._requestManager = new web3_request_manager_1.Web3RequestManager(providerOrContext);
            this._subscriptionManager = new web3_subscription_manager_1.Web3SubscriptionManager(this._requestManager, {});
            return;
        }
        const { config, provider, requestManager, subscriptionManager, registeredSubscriptions, accountProvider, wallet, } = providerOrContext;
        this.setConfig(config !== null && config !== void 0 ? config : {});
        this._requestManager =
            requestManager !== null && requestManager !== void 0 ? requestManager : new web3_request_manager_1.Web3RequestManager(provider, undefined, (_a = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a === void 0 ? void 0 : _a.useSubscriptionWhenCheckingBlockTimeout);
        if (subscriptionManager) {
            this._subscriptionManager = subscriptionManager;
        }
        else if (registeredSubscriptions) {
            this._subscriptionManager = new web3_subscription_manager_1.Web3SubscriptionManager(this.requestManager, registeredSubscriptions);
        }
        if (accountProvider) {
            this._accountProvider = accountProvider;
        }
        if (wallet) {
            this._wallet = wallet;
        }
    }
    get requestManager() {
        return this._requestManager;
    }
    get subscriptionManager() {
        return this._subscriptionManager;
    }
    get wallet() {
        return this._wallet;
    }
    get accountProvider() {
        return this._accountProvider;
    }
    static fromContextObject(...args) {
        return new this(...args.reverse());
    }
    getContextObject() {
        var _a;
        return {
            config: this.getConfig(),
            provider: this.provider,
            requestManager: this.requestManager,
            subscriptionManager: this.subscriptionManager,
            registeredSubscriptions: (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.registeredSubscriptions,
            providers: this.providers,
            wallet: this.wallet,
            accountProvider: this.accountProvider,
        };
    }
    use(ContextRef, ...args) {
        const newContextChild = new ContextRef(...[...args, this.getContextObject()]);
        this.on(web3_config_1.Web3ConfigEvent.CONFIG_CHANGE, event => {
            newContextChild.setConfig({ [event.name]: event.newValue });
        });
        return newContextChild;
    }
    link(parentContext) {
        this.setConfig(parentContext.getConfig());
        this._requestManager = parentContext.requestManager;
        this.provider = parentContext.provider;
        this._subscriptionManager = parentContext.subscriptionManager;
        this._wallet = parentContext.wallet;
        this._accountProvider = parentContext._accountProvider;
        parentContext.on(web3_config_1.Web3ConfigEvent.CONFIG_CHANGE, event => {
            this.setConfig({ [event.name]: event.newValue });
        });
    }
    registerPlugin(plugin) {
        if (this[plugin.pluginNamespace] !== undefined)
            throw new web3_errors_1.ExistingPluginNamespaceError(plugin.pluginNamespace);
        const _pluginObject = {
            [plugin.pluginNamespace]: plugin,
        };
        _pluginObject[plugin.pluginNamespace].link(this);
        Object.assign(this, _pluginObject);
    }
    get provider() {
        return this.currentProvider;
    }
    set provider(provider) {
        this.requestManager.setProvider(provider);
    }
    get currentProvider() {
        return this.requestManager.provider;
    }
    set currentProvider(provider) {
        this.requestManager.setProvider(provider);
    }
    get givenProvider() {
        return Web3Context.givenProvider;
    }
    setProvider(provider) {
        this.provider = provider;
        return true;
    }
    get BatchRequest() {
        return web3_batch_request_1.Web3BatchRequest.bind(undefined, this._requestManager);
    }
}
exports.Web3Context = Web3Context;
Web3Context.providers = web3_request_manager_1.Web3RequestManager.providers;
class Web3PluginBase extends Web3Context {
}
exports.Web3PluginBase = Web3PluginBase;
class Web3EthPluginBase extends Web3PluginBase {
}
exports.Web3EthPluginBase = Web3EthPluginBase;
//# sourceMappingURL=web3_context.js.map