import { Numbers, HexString, BlockNumberOrTag, Common } from 'web3-types';
import { TransactionTypeParser } from './types';
import { TransactionBuilder } from './web3_context';
import { Web3EventEmitter } from './web3_event_emitter';
export interface Web3ConfigOptions {
    handleRevert: boolean;
    defaultAccount?: HexString;
    defaultBlock: BlockNumberOrTag;
    transactionSendTimeout: number;
    transactionBlockTimeout: number;
    transactionConfirmationBlocks: number;
    transactionPollingInterval: number;
    transactionPollingTimeout: number;
    transactionReceiptPollingInterval?: number;
    transactionConfirmationPollingInterval?: number;
    blockHeaderTimeout: number;
    maxListenersWarningThreshold: number;
    defaultNetworkId?: Numbers;
    defaultChain: string;
    defaultHardfork: string;
    defaultCommon?: Common;
    defaultTransactionType: Numbers;
    defaultMaxPriorityFeePerGas: Numbers;
    enableExperimentalFeatures: {
        useSubscriptionWhenCheckingBlockTimeout: boolean;
        useRpcCallSpecification: boolean;
    };
    transactionBuilder?: TransactionBuilder;
    transactionTypeParser?: TransactionTypeParser;
}
declare type ConfigEvent<T, P extends keyof T = keyof T> = P extends unknown ? {
    name: P;
    oldValue: T[P];
    newValue: T[P];
} : never;
export declare enum Web3ConfigEvent {
    CONFIG_CHANGE = "CONFIG_CHANGE"
}
export declare abstract class Web3Config extends Web3EventEmitter<{
    [Web3ConfigEvent.CONFIG_CHANGE]: ConfigEvent<Web3ConfigOptions>;
}> implements Web3ConfigOptions {
    private _config;
    constructor(options?: Partial<Web3ConfigOptions>);
    getConfig(): Web3ConfigOptions;
    setConfig(options: Partial<Web3ConfigOptions>): void;
    get handleRevert(): boolean;
    set handleRevert(val: boolean);
    get defaultAccount(): string | undefined;
    set defaultAccount(val: string | undefined);
    get defaultBlock(): BlockNumberOrTag;
    set defaultBlock(val: BlockNumberOrTag);
    get transactionSendTimeout(): number;
    set transactionSendTimeout(val: number);
    get transactionBlockTimeout(): number;
    set transactionBlockTimeout(val: number);
    get transactionConfirmationBlocks(): number;
    set transactionConfirmationBlocks(val: number);
    get transactionPollingInterval(): number;
    set transactionPollingInterval(val: number);
    get transactionPollingTimeout(): number;
    set transactionPollingTimeout(val: number);
    get transactionReceiptPollingInterval(): number | undefined;
    set transactionReceiptPollingInterval(val: number | undefined);
    get transactionConfirmationPollingInterval(): number | undefined;
    set transactionConfirmationPollingInterval(val: number | undefined);
    get blockHeaderTimeout(): number;
    set blockHeaderTimeout(val: number);
    get enableExperimentalFeatures(): {
        useSubscriptionWhenCheckingBlockTimeout: boolean;
        useRpcCallSpecification: boolean;
    };
    set enableExperimentalFeatures(val: {
        useSubscriptionWhenCheckingBlockTimeout: boolean;
        useRpcCallSpecification: boolean;
    });
    get maxListenersWarningThreshold(): number;
    set maxListenersWarningThreshold(val: number);
    get defaultNetworkId(): Numbers | undefined;
    set defaultNetworkId(val: Numbers | undefined);
    get defaultChain(): string;
    set defaultChain(val: string);
    get defaultHardfork(): string;
    set defaultHardfork(val: string);
    get defaultCommon(): Common | undefined;
    set defaultCommon(val: Common | undefined);
    get defaultTransactionType(): Numbers;
    set defaultTransactionType(val: Numbers);
    get defaultMaxPriorityFeePerGas(): Numbers;
    set defaultMaxPriorityFeePerGas(val: Numbers);
    get transactionBuilder(): TransactionBuilder<unknown> | undefined;
    set transactionBuilder(val: TransactionBuilder<unknown> | undefined);
    get transactionTypeParser(): TransactionTypeParser | undefined;
    set transactionTypeParser(val: TransactionTypeParser | undefined);
    private _triggerConfigChange;
}
export {};
//# sourceMappingURL=web3_config.d.ts.map