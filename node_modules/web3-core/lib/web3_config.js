"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3Config = exports.Web3ConfigEvent = void 0;
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const web3_event_emitter_1 = require("./web3_event_emitter");
var Web3ConfigEvent;
(function (Web3ConfigEvent) {
    Web3ConfigEvent["CONFIG_CHANGE"] = "CONFIG_CHANGE";
})(Web3ConfigEvent = exports.Web3ConfigEvent || (exports.Web3ConfigEvent = {}));
class Web3Config extends web3_event_emitter_1.Web3EventEmitter {
    constructor(options) {
        super();
        this._config = {
            handleRevert: false,
            defaultAccount: undefined,
            defaultBlock: 'latest',
            transactionBlockTimeout: 50,
            transactionConfirmationBlocks: 24,
            transactionPollingInterval: 1000,
            transactionPollingTimeout: 750 * 1000,
            transactionReceiptPollingInterval: undefined,
            transactionSendTimeout: 750 * 1000,
            transactionConfirmationPollingInterval: undefined,
            blockHeaderTimeout: 10,
            maxListenersWarningThreshold: 100,
            defaultNetworkId: undefined,
            defaultChain: 'mainnet',
            defaultHardfork: 'london',
            defaultCommon: undefined,
            defaultTransactionType: '0x0',
            defaultMaxPriorityFeePerGas: (0, web3_utils_1.toHex)(2500000000),
            enableExperimentalFeatures: {
                useSubscriptionWhenCheckingBlockTimeout: false,
                useRpcCallSpecification: false,
            },
            transactionBuilder: undefined,
            transactionTypeParser: undefined,
        };
        this.setConfig(options !== null && options !== void 0 ? options : {});
    }
    getConfig() {
        return this._config;
    }
    setConfig(options) {
        Object.assign(this._config, options);
    }
    get handleRevert() {
        return this._config.handleRevert;
    }
    set handleRevert(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'handleRevert',
            oldValue: this._config.handleRevert,
            newValue: val,
        });
        this._config.handleRevert = val;
    }
    get defaultAccount() {
        return this._config.defaultAccount;
    }
    set defaultAccount(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'defaultAccount',
            oldValue: this._config.defaultAccount,
            newValue: val,
        });
        this._config.defaultAccount = val;
    }
    get defaultBlock() {
        return this._config.defaultBlock;
    }
    set defaultBlock(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'defaultBlock',
            oldValue: this._config.defaultBlock,
            newValue: val,
        });
        this._config.defaultBlock = val;
    }
    get transactionSendTimeout() {
        return this._config.transactionSendTimeout;
    }
    set transactionSendTimeout(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'transactionSendTimeout',
            oldValue: this._config.transactionSendTimeout,
            newValue: val,
        });
        this._config.transactionSendTimeout = val;
    }
    get transactionBlockTimeout() {
        return this._config.transactionBlockTimeout;
    }
    set transactionBlockTimeout(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'transactionBlockTimeout',
            oldValue: this._config.transactionBlockTimeout,
            newValue: val,
        });
        this._config.transactionBlockTimeout = val;
    }
    get transactionConfirmationBlocks() {
        return this._config.transactionConfirmationBlocks;
    }
    set transactionConfirmationBlocks(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'transactionConfirmationBlocks',
            oldValue: this._config.transactionConfirmationBlocks,
            newValue: val,
        });
        this._config.transactionConfirmationBlocks = val;
    }
    get transactionPollingInterval() {
        return this._config.transactionPollingInterval;
    }
    set transactionPollingInterval(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'transactionPollingInterval',
            oldValue: this._config.transactionPollingInterval,
            newValue: val,
        });
        this._config.transactionPollingInterval = val;
        this.transactionReceiptPollingInterval = val;
        this.transactionConfirmationPollingInterval = val;
    }
    get transactionPollingTimeout() {
        return this._config.transactionPollingTimeout;
    }
    set transactionPollingTimeout(val) {
        this._triggerConfigChange('transactionPollingTimeout', val);
        this._config.transactionPollingTimeout = val;
    }
    get transactionReceiptPollingInterval() {
        return this._config.transactionReceiptPollingInterval;
    }
    set transactionReceiptPollingInterval(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'transactionReceiptPollingInterval',
            oldValue: this._config.transactionReceiptPollingInterval,
            newValue: val,
        });
        this._config.transactionReceiptPollingInterval = val;
    }
    get transactionConfirmationPollingInterval() {
        return this._config.transactionConfirmationPollingInterval;
    }
    set transactionConfirmationPollingInterval(val) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: 'transactionConfirmationPollingInterval',
            oldValue: this._config.transactionConfirmationPollingInterval,
            newValue: val,
        });
        this._config.transactionConfirmationPollingInterval = val;
    }
    get blockHeaderTimeout() {
        return this._config.blockHeaderTimeout;
    }
    set blockHeaderTimeout(val) {
        this._triggerConfigChange('blockHeaderTimeout', val);
        this._config.blockHeaderTimeout = val;
    }
    get enableExperimentalFeatures() {
        return this._config.enableExperimentalFeatures;
    }
    set enableExperimentalFeatures(val) {
        this._triggerConfigChange('enableExperimentalFeatures', val);
        this._config.enableExperimentalFeatures = val;
    }
    get maxListenersWarningThreshold() {
        return this._config.maxListenersWarningThreshold;
    }
    set maxListenersWarningThreshold(val) {
        this._triggerConfigChange('maxListenersWarningThreshold', val);
        this.setMaxListenerWarningThreshold(val);
        this._config.maxListenersWarningThreshold = val;
    }
    get defaultNetworkId() {
        return this._config.defaultNetworkId;
    }
    set defaultNetworkId(val) {
        this._triggerConfigChange('defaultNetworkId', val);
        this._config.defaultNetworkId = val;
    }
    get defaultChain() {
        return this._config.defaultChain;
    }
    set defaultChain(val) {
        if (!(0, web3_utils_1.isNullish)(this._config.defaultCommon) &&
            !(0, web3_utils_1.isNullish)(this._config.defaultCommon.baseChain) &&
            val !== this._config.defaultCommon.baseChain)
            throw new web3_errors_1.ConfigChainMismatchError(this._config.defaultChain, val);
        this._triggerConfigChange('defaultChain', val);
        this._config.defaultChain = val;
    }
    get defaultHardfork() {
        return this._config.defaultHardfork;
    }
    set defaultHardfork(val) {
        if (!(0, web3_utils_1.isNullish)(this._config.defaultCommon) &&
            !(0, web3_utils_1.isNullish)(this._config.defaultCommon.hardfork) &&
            val !== this._config.defaultCommon.hardfork)
            throw new web3_errors_1.ConfigHardforkMismatchError(this._config.defaultCommon.hardfork, val);
        this._triggerConfigChange('defaultHardfork', val);
        this._config.defaultHardfork = val;
    }
    get defaultCommon() {
        return this._config.defaultCommon;
    }
    set defaultCommon(val) {
        if (!(0, web3_utils_1.isNullish)(this._config.defaultHardfork) &&
            !(0, web3_utils_1.isNullish)(val) &&
            !(0, web3_utils_1.isNullish)(val.hardfork) &&
            this._config.defaultHardfork !== val.hardfork)
            throw new web3_errors_1.ConfigHardforkMismatchError(this._config.defaultHardfork, val.hardfork);
        if (!(0, web3_utils_1.isNullish)(this._config.defaultChain) &&
            !(0, web3_utils_1.isNullish)(val) &&
            !(0, web3_utils_1.isNullish)(val.baseChain) &&
            this._config.defaultChain !== val.baseChain)
            throw new web3_errors_1.ConfigChainMismatchError(this._config.defaultChain, val.baseChain);
        this._triggerConfigChange('defaultCommon', val);
        this._config.defaultCommon = val;
    }
    get defaultTransactionType() {
        return this._config.defaultTransactionType;
    }
    set defaultTransactionType(val) {
        this._triggerConfigChange('defaultTransactionType', val);
        this._config.defaultTransactionType = val;
    }
    get defaultMaxPriorityFeePerGas() {
        return this._config.defaultMaxPriorityFeePerGas;
    }
    set defaultMaxPriorityFeePerGas(val) {
        this._triggerConfigChange('defaultMaxPriorityFeePerGas', val);
        this._config.defaultMaxPriorityFeePerGas = val;
    }
    get transactionBuilder() {
        return this._config.transactionBuilder;
    }
    set transactionBuilder(val) {
        this._triggerConfigChange('transactionBuilder', val);
        this._config.transactionBuilder = val;
    }
    get transactionTypeParser() {
        return this._config.transactionTypeParser;
    }
    set transactionTypeParser(val) {
        this._triggerConfigChange('transactionTypeParser', val);
        this._config.transactionTypeParser = val;
    }
    _triggerConfigChange(config, newValue) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
            name: config,
            oldValue: this._config[config],
            newValue,
        });
    }
}
exports.Web3Config = Web3Config;
//# sourceMappingURL=web3_config.js.map