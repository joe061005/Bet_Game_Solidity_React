/// <reference types="node" />
import { Web3APISpec, Web3BaseWallet, Web3BaseWalletAccount, Web3AccountProvider, SupportedProviders, HexString, EthExecutionAPI, Web3BaseProvider } from 'web3-types';
import { Web3Config, Web3ConfigOptions } from './web3_config';
import { Web3RequestManager } from './web3_request_manager';
import { Web3SubscriptionConstructor } from './web3_subscriptions';
import { Web3SubscriptionManager } from './web3_subscription_manager';
import { Web3BatchRequest } from './web3_batch_request';
export declare type Web3ContextObject<API extends Web3APISpec = unknown, RegisteredSubs extends {
    [key: string]: Web3SubscriptionConstructor<API>;
} = any> = {
    config: Web3ConfigOptions;
    provider?: SupportedProviders<API> | string;
    requestManager: Web3RequestManager<API>;
    subscriptionManager?: Web3SubscriptionManager<API, RegisteredSubs> | undefined;
    registeredSubscriptions?: RegisteredSubs;
    providers: typeof Web3RequestManager.providers;
    accountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;
    wallet?: Web3BaseWallet<Web3BaseWalletAccount>;
};
export declare type Web3ContextInitOptions<API extends Web3APISpec = unknown, RegisteredSubs extends {
    [key: string]: Web3SubscriptionConstructor<API>;
} = any> = {
    config?: Partial<Web3ConfigOptions>;
    provider?: SupportedProviders<API> | string;
    requestManager?: Web3RequestManager<API>;
    subscriptionManager?: Web3SubscriptionManager<API, RegisteredSubs> | undefined;
    registeredSubscriptions?: RegisteredSubs;
    accountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;
    wallet?: Web3BaseWallet<Web3BaseWalletAccount>;
};
export declare type Web3ContextConstructor<T extends Web3Context, T2 extends unknown[]> = new (...args: [...extras: T2, context: Web3ContextObject]) => T;
export declare type Web3ContextFactory<T extends Web3Context, T2 extends unknown[]> = Web3ContextConstructor<T, T2> & {
    fromContextObject(this: Web3ContextConstructor<T, T2>, contextObject: Web3ContextObject): T;
};
export declare class Web3Context<API extends Web3APISpec = unknown, RegisteredSubs extends {
    [key: string]: Web3SubscriptionConstructor<API>;
} = any> extends Web3Config {
    static readonly providers: {
        HttpProvider: import("web3-types").Web3BaseProviderConstructor;
        WebsocketProvider: import("web3-types").Web3BaseProviderConstructor;
        IpcProvider: import("web3-types").Web3BaseProviderConstructor;
    };
    static givenProvider?: SupportedProviders<never>;
    readonly providers: {
        HttpProvider: import("web3-types").Web3BaseProviderConstructor;
        WebsocketProvider: import("web3-types").Web3BaseProviderConstructor;
        IpcProvider: import("web3-types").Web3BaseProviderConstructor;
    };
    protected _requestManager: Web3RequestManager<API>;
    protected _subscriptionManager?: Web3SubscriptionManager<API, RegisteredSubs>;
    protected _accountProvider?: Web3AccountProvider<Web3BaseWalletAccount>;
    protected _wallet?: Web3BaseWallet<Web3BaseWalletAccount>;
    constructor(providerOrContext?: string | SupportedProviders<API> | Web3ContextInitOptions<API, RegisteredSubs>);
    get requestManager(): Web3RequestManager<API>;
    get subscriptionManager(): Web3SubscriptionManager<API, RegisteredSubs> | undefined;
    get wallet(): Web3BaseWallet<Web3BaseWalletAccount> | undefined;
    get accountProvider(): Web3AccountProvider<Web3BaseWalletAccount> | undefined;
    static fromContextObject<T extends Web3Context, T3 extends unknown[]>(this: Web3ContextConstructor<T, T3>, ...args: [Web3ContextObject, ...T3]): T;
    getContextObject(): Web3ContextObject<API, RegisteredSubs>;
    use<T extends Web3Context, T2 extends unknown[]>(ContextRef: Web3ContextConstructor<T, T2>, ...args: [...T2]): T;
    link<T extends Web3Context>(parentContext: T): void;
    registerPlugin(plugin: Web3PluginBase): void;
    get provider(): Web3BaseProvider<API> | undefined;
    set provider(provider: SupportedProviders<API> | string | undefined);
    get currentProvider(): Web3BaseProvider<API> | undefined;
    set currentProvider(provider: SupportedProviders<API> | string | undefined);
    get givenProvider(): SupportedProviders<never> | undefined;
    setProvider(provider?: SupportedProviders<API> | string): boolean;
    get BatchRequest(): new () => Web3BatchRequest;
}
export declare type TransactionBuilder<API extends Web3APISpec = unknown> = <ReturnType = Record<string, unknown>>(options: {
    transaction: Record<string, unknown>;
    web3Context: Web3Context<API>;
    privateKey?: HexString | Buffer;
}) => Promise<ReturnType>;
export declare abstract class Web3PluginBase<API extends Web3APISpec = Web3APISpec> extends Web3Context<API> {
    abstract pluginNamespace: string;
}
export declare abstract class Web3EthPluginBase<API extends Web3APISpec = unknown> extends Web3PluginBase<API & EthExecutionAPI> {
}
//# sourceMappingURL=web3_context.d.ts.map