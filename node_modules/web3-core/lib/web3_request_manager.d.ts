/// <reference types="node" />
import { Socket } from 'net';
import { EthExecutionAPI, JsonRpcBatchRequest, JsonRpcBatchResponse, SupportedProviders, Web3APIMethod, Web3APIRequest, Web3APIReturnType, Web3APISpec, Web3BaseProviderConstructor } from 'web3-types';
import { Web3EventEmitter } from './web3_event_emitter';
export declare enum Web3RequestManagerEvent {
    PROVIDER_CHANGED = "PROVIDER_CHANGED",
    BEFORE_PROVIDER_CHANGE = "BEFORE_PROVIDER_CHANGE"
}
export declare class Web3RequestManager<API extends Web3APISpec = EthExecutionAPI> extends Web3EventEmitter<{
    [key in Web3RequestManagerEvent]: SupportedProviders<API> | undefined;
}> {
    private _provider?;
    private readonly useRpcCallSpecification?;
    constructor(provider?: SupportedProviders<API> | string, net?: Socket, useRpcCallSpecification?: boolean);
    static get providers(): {
        HttpProvider: Web3BaseProviderConstructor;
        WebsocketProvider: Web3BaseProviderConstructor;
        IpcProvider: Web3BaseProviderConstructor;
    };
    get provider(): SupportedProviders<API> | undefined;
    get providers(): {
        HttpProvider: Web3BaseProviderConstructor;
        WebsocketProvider: Web3BaseProviderConstructor;
        IpcProvider: Web3BaseProviderConstructor;
    };
    setProvider(provider?: SupportedProviders<API> | string, net?: Socket): boolean;
    send<Method extends Web3APIMethod<API>, ResponseType = Web3APIReturnType<API, Method>>(request: Web3APIRequest<API, Method>): Promise<ResponseType>;
    sendBatch(request: JsonRpcBatchRequest): Promise<JsonRpcBatchResponse<unknown>>;
    private _sendRequest;
    private _processJsonRpcResponse;
    private static _isReverted;
    private _buildResponse;
}
//# sourceMappingURL=web3_request_manager.d.ts.map