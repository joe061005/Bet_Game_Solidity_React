"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3SubscriptionManager = void 0;
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const utils_1 = require("./utils");
const web3_request_manager_1 = require("./web3_request_manager");
class Web3SubscriptionManager {
    constructor(requestManager, registeredSubscriptions) {
        this.requestManager = requestManager;
        this.registeredSubscriptions = registeredSubscriptions;
        this._subscriptions = new Map();
        this.requestManager.on(web3_request_manager_1.Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter(this, void 0, void 0, function* () {
            yield this.unsubscribe();
        }));
        this.requestManager.on(web3_request_manager_1.Web3RequestManagerEvent.PROVIDER_CHANGED, () => {
            this.clear();
        });
    }
    subscribe(name, args, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.requestManager.provider) {
                throw new web3_errors_1.ProviderError('Provider not available');
            }
            const Klass = this.registeredSubscriptions[name];
            if (!Klass) {
                throw new web3_errors_1.SubscriptionError('Invalid subscription type');
            }
            const subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {
                requestManager: this.requestManager,
                returnFormat,
            });
            yield this.addSubscription(subscription);
            return subscription;
        });
    }
    get subscriptions() {
        return this._subscriptions;
    }
    addSubscription(sub) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.supportsSubscriptions()) {
                throw new web3_errors_1.SubscriptionError('The current provider does not support subscriptions');
            }
            if (sub.id && this._subscriptions.has(sub.id)) {
                throw new web3_errors_1.SubscriptionError(`Subscription with id "${sub.id}" already exists`);
            }
            yield sub.subscribe();
            if ((0, web3_utils_1.isNullish)(sub.id)) {
                throw new web3_errors_1.SubscriptionError('Subscription is not subscribed yet.');
            }
            this._subscriptions.set(sub.id, sub);
        });
    }
    removeSubscription(sub) {
        return __awaiter(this, void 0, void 0, function* () {
            if ((0, web3_utils_1.isNullish)(sub.id)) {
                throw new web3_errors_1.SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');
            }
            if (!this._subscriptions.has(sub.id)) {
                throw new web3_errors_1.SubscriptionError(`Subscription with id "${sub.id.toString()}" does not exists`);
            }
            const { id } = sub;
            yield sub.unsubscribe();
            this._subscriptions.delete(id);
            return id;
        });
    }
    unsubscribe(condition) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            for (const [id, sub] of this.subscriptions.entries()) {
                if (!condition || (typeof condition === 'function' && condition({ id, sub }))) {
                    result.push(this.removeSubscription(sub));
                }
            }
            return Promise.all(result);
        });
    }
    clear() {
        this._subscriptions.clear();
    }
    supportsSubscriptions() {
        return (0, web3_utils_1.isNullish)(this.requestManager.provider)
            ? false
            : (0, utils_1.isSupportSubscriptions)(this.requestManager.provider);
    }
}
exports.Web3SubscriptionManager = Web3SubscriptionManager;
//# sourceMappingURL=web3_subscription_manager.js.map