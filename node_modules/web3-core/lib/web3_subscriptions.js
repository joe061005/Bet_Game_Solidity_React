"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3Subscription = void 0;
const web3_utils_1 = require("web3-utils");
const web3_utils_2 = require("web3-utils");
const web3_event_emitter_1 = require("./web3_event_emitter");
class Web3Subscription extends web3_event_emitter_1.Web3EventEmitter {
    constructor(args, options) {
        var _a;
        super();
        this.args = args;
        this._requestManager = options.requestManager;
        this._returnFormat = (_a = options.returnFormat) !== null && _a !== void 0 ? _a : web3_utils_1.DEFAULT_RETURN_FORMAT;
    }
    get id() {
        return this._id;
    }
    get lastBlock() {
        return this._lastBlock;
    }
    subscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            this._id = yield this._requestManager.send({
                method: 'eth_subscribe',
                params: this._buildSubscriptionParams(),
            });
            const messageListener = (err, data) => {
                if (data && web3_utils_2.jsonRpc.isResponseWithNotification(data)) {
                    this._processSubscriptionResult(data === null || data === void 0 ? void 0 : data.params.result);
                }
                if (err) {
                    this._processSubscriptionError(err);
                }
            };
            this._requestManager.provider.on('message', messageListener);
            this._messageListener = messageListener;
        });
    }
    get returnFormat() {
        return this._returnFormat;
    }
    resubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.unsubscribe();
            yield this.subscribe();
        });
    }
    unsubscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.id) {
                return;
            }
            yield this._requestManager.send({
                method: 'eth_unsubscribe',
                params: [this.id],
            });
            this._id = undefined;
            this._requestManager.provider.removeListener('message', this._messageListener);
        });
    }
    _processSubscriptionResult(_data) {
    }
    _processSubscriptionError(_err) {
    }
    _buildSubscriptionParams() {
        throw new Error('Implement in the child class');
    }
}
exports.Web3Subscription = Web3Subscription;
//# sourceMappingURL=web3_subscriptions.js.map