"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAddress = exports.checkAddressCheckSum = void 0;
const keccak_1 = require("ethereum-cryptography/keccak");
const string_1 = require("./string");
const checkAddressCheckSum = (data) => {
    if (!/^(0x)?[0-9a-f]{40}$/i.test(data))
        return false;
    const address = data.slice(2);
    const updatedData = Buffer.from(address.toLowerCase(), 'utf-8');
    const addressHash = Buffer.from((0, keccak_1.keccak256)(updatedData))
        .toString('hex')
        .replace(/^0x/i, '');
    for (let i = 0; i < 40; i += 1) {
        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) ||
            (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
            return false;
        }
    }
    return true;
};
exports.checkAddressCheckSum = checkAddressCheckSum;
const isAddress = (value, checkChecksum = true) => {
    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {
        return false;
    }
    let valueToCheck;
    if (Buffer.isBuffer(value)) {
        valueToCheck = `0x${value.toString('hex')}`;
    }
    else if (typeof value === 'string' && !(0, string_1.isHexStrict)(value)) {
        valueToCheck = `0x${value}`;
    }
    else {
        valueToCheck = value;
    }
    if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {
        return false;
    }
    if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) ||
        /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) {
        return true;
    }
    return checkChecksum ? (0, exports.checkAddressCheckSum)(valueToCheck) : true;
};
exports.isAddress = isAddress;
//# sourceMappingURL=address.js.map