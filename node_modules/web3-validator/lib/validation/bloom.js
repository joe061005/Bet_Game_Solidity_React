"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isContractAddressInBloom = exports.isUserEthereumAddressInBloom = exports.isInBloom = exports.isBloom = void 0;
const keccak_1 = require("ethereum-cryptography/keccak");
const utils_1 = require("../utils");
const address_1 = require("./address");
const string_1 = require("./string");
const isBloom = (bloom) => {
    if (typeof bloom !== 'string') {
        return false;
    }
    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
    }
    if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
    }
    return false;
};
exports.isBloom = isBloom;
const isInBloom = (bloom, value) => {
    if (typeof value === 'string' && !(0, string_1.isHexStrict)(value)) {
        return false;
    }
    if (!(0, exports.isBloom)(bloom)) {
        return false;
    }
    const buffer = typeof value === 'string' ? Buffer.from(value.slice(2), 'hex') : value;
    const hash = Buffer.from((0, keccak_1.keccak256)(buffer))
        .toString('hex')
        .replace(/^0x/i, '');
    for (let i = 0; i < 12; i += 4) {
        const bitpos = ((parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16)) &
            2047;
        const code = (0, utils_1.codePointToInt)(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
        const offset = 1 << bitpos % 4;
        if ((code & offset) !== offset) {
            return false;
        }
    }
    return true;
};
exports.isInBloom = isInBloom;
const isUserEthereumAddressInBloom = (bloom, ethereumAddress) => {
    if (!(0, exports.isBloom)(bloom)) {
        return false;
    }
    if (!(0, address_1.isAddress)(ethereumAddress)) {
        return false;
    }
    const address = (0, utils_1.padLeft)(ethereumAddress, 64);
    return (0, exports.isInBloom)(bloom, address);
};
exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
const isContractAddressInBloom = (bloom, contractAddress) => {
    if (!(0, exports.isBloom)(bloom)) {
        return false;
    }
    if (!(0, address_1.isAddress)(contractAddress)) {
        return false;
    }
    return (0, exports.isInBloom)(bloom, contractAddress);
};
exports.isContractAddressInBloom = isContractAddressInBloom;
//# sourceMappingURL=bloom.js.map