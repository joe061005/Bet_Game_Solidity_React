"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketProvider = void 0;
const isomorphic_ws_1 = __importDefault(require("isomorphic-ws"));
const web3_utils_1 = require("web3-utils");
const web3_errors_1 = require("web3-errors");
class WebSocketProvider extends web3_utils_1.SocketProvider {
    _validateProviderPath(providerUrl) {
        return typeof providerUrl === 'string' ? /^ws(s)?:\/\//i.test(providerUrl) : false;
    }
    getStatus() {
        if (this._socketConnection && !(0, web3_utils_1.isNullish)(this._socketConnection)) {
            switch (this._socketConnection.readyState) {
                case this._socketConnection.CONNECTING: {
                    return 'connecting';
                }
                case this._socketConnection.OPEN: {
                    return 'connected';
                }
                default: {
                    return 'disconnected';
                }
            }
        }
        return 'disconnected';
    }
    _openSocketConnection() {
        this._socketConnection = new isomorphic_ws_1.default(this._socketPath, undefined, this._socketOptions && Object.keys(this._socketOptions).length === 0
            ? undefined
            : this._socketOptions);
    }
    _closeSocketConnection(code, data) {
        var _a;
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.close(code, data);
    }
    _sendToSocket(payload) {
        var _a;
        if (this.getStatus() === 'disconnected') {
            throw new web3_errors_1.ConnectionNotOpenError();
        }
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(payload));
    }
    _parseResponses(event) {
        return this.chunkResponseParser.parseResponse(event.data);
    }
    _addSocketListeners() {
        var _a, _b, _c, _d, _e, _f;
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.addEventListener('message', this._onMessageHandler);
        (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.addEventListener('open', this._onOpenHandler);
        (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.addEventListener('close', e => this._onCloseHandler(e));
        let errorListeners;
        try {
            errorListeners = (_d = this._socketConnection) === null || _d === void 0 ? void 0 : _d.listeners('error');
        }
        catch (error) {
            (_e = this._socketConnection) === null || _e === void 0 ? void 0 : _e.addEventListener('error', this._onErrorHandler);
            return;
        }
        if (!errorListeners || errorListeners.length === 0) {
            (_f = this._socketConnection) === null || _f === void 0 ? void 0 : _f.addEventListener('error', this._onErrorHandler);
        }
    }
    _removeSocketListeners() {
        var _a, _b, _c;
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', this._onMessageHandler);
        (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.removeEventListener('open', this._onOpenHandler);
        (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.removeEventListener('close', this._onCloseHandler);
    }
    _onCloseEvent(event) {
        if (this._reconnectOptions.autoReconnect &&
            (![1000, 1001].includes(event.code) || !event.wasClean)) {
            this._reconnect();
            return;
        }
        this._clearQueues(event);
        this._removeSocketListeners();
        this._onDisconnect(event.code, event.reason);
    }
}
exports.default = WebSocketProvider;
exports.WebSocketProvider = WebSocketProvider;
//# sourceMappingURL=index.js.map