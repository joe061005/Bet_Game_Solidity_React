/// <reference types="ws" />
/// <reference types="node" />
import { ClientRequestArgs } from 'http';
import WebSocket, { ClientOptions, CloseEvent } from 'isomorphic-ws';
import { EthExecutionAPI, Web3APIMethod, Web3APIPayload, Web3APISpec, Web3ProviderStatus } from 'web3-types';
import { SocketProvider } from 'web3-utils';
export { ClientRequestArgs } from 'http';
export { ClientOptions } from 'isomorphic-ws';
export default class WebSocketProvider<API extends Web3APISpec = EthExecutionAPI> extends SocketProvider<WebSocket.MessageEvent, WebSocket.CloseEvent, WebSocket.ErrorEvent, API> {
    protected readonly _socketOptions?: ClientOptions | ClientRequestArgs;
    protected _socketConnection?: WebSocket;
    protected _validateProviderPath(providerUrl: string): boolean;
    getStatus(): Web3ProviderStatus;
    protected _openSocketConnection(): void;
    protected _closeSocketConnection(code?: number, data?: string): void;
    protected _sendToSocket<Method extends Web3APIMethod<API>>(payload: Web3APIPayload<API, Method>): void;
    protected _parseResponses(event: WebSocket.MessageEvent): import("web3-types").JsonRpcResponse<import("web3-types").JsonRpcResult, import("web3-types").JsonRpcResult>[];
    protected _addSocketListeners(): void;
    protected _removeSocketListeners(): void;
    protected _onCloseEvent(event: CloseEvent): void;
}
export { WebSocketProvider };
//# sourceMappingURL=index.d.ts.map