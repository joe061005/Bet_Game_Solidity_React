import { Web3BaseWallet, Web3BaseWalletAccount, KeyStore } from 'web3-types';
import { WebStorage } from './types';
export declare class Wallet<T extends Web3BaseWalletAccount = Web3BaseWalletAccount> extends Web3BaseWallet<T> {
    private readonly _addressMap;
    private readonly _defaultKeyName;
    static getStorage(): WebStorage | undefined;
    create(numberOfAccounts: number): this;
    add(account: T | string): this;
    get(addressOrIndex: string | number): T | undefined;
    remove(addressOrIndex: string | number): boolean;
    clear(): this;
    encrypt(password: string, options?: Record<string, unknown> | undefined): Promise<KeyStore[]>;
    decrypt(encryptedWallets: KeyStore[], password: string, options?: Record<string, unknown> | undefined): Promise<this>;
    save(password: string, keyName?: string): Promise<boolean>;
    load(password: string, keyName?: string): Promise<this>;
}
//# sourceMappingURL=wallet.d.ts.map