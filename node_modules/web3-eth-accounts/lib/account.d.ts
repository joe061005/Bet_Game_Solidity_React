/// <reference types="node" />
import { TypedTransaction } from '@ethereumjs/tx';
import { Address, Bytes, HexString, CipherOptions, KeyStore } from 'web3-types';
import { SignatureObject, SignResult, SignTransactionResult, Web3Account } from './types';
export declare const parseAndValidatePrivateKey: (data: Bytes, ignoreLength?: boolean) => Buffer;
export declare const hashMessage: (message: string) => string;
export declare const sign: (data: string, privateKey: Bytes) => SignResult;
export declare const signTransaction: (transaction: TypedTransaction, privateKey: HexString) => Promise<SignTransactionResult>;
export declare const recoverTransaction: (rawTransaction: HexString) => Address;
export declare const recover: (data: string | SignatureObject, signatureOrV?: string, prefixedOrR?: boolean | string, s?: string, prefixed?: boolean) => Address;
export declare const privateKeyToAddress: (privateKey: Bytes) => string;
export declare const encrypt: (privateKey: Bytes, password: string | Buffer, options?: CipherOptions) => Promise<KeyStore>;
export declare const privateKeyToAccount: (privateKey: Bytes, ignoreLength?: boolean) => Web3Account;
export declare const create: () => Web3Account;
export declare const decrypt: (keystore: KeyStore | string, password: string | Buffer, nonStrict?: boolean) => Promise<Web3Account>;
//# sourceMappingURL=account.d.ts.map