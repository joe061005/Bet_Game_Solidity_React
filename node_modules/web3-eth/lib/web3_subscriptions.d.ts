import { SyncOutput, Address, BlockNumberOrTag, HexString, Topic, BlockHeaderOutput, LogsOutput } from 'web3-types';
import { Web3Subscription } from 'web3-core';
declare type CommonSubscriptionEvents = {
    error: Error;
    connected: number;
};
export declare class LogsSubscription extends Web3Subscription<CommonSubscriptionEvents & {
    data: LogsOutput;
}, {
    readonly fromBlock?: BlockNumberOrTag;
    readonly address?: Address | Address[];
    readonly topics?: Topic[];
}> {
    protected _buildSubscriptionParams(): ["logs", any];
    _processSubscriptionResult(data: LogsOutput): void;
    _processSubscriptionError(error: Error): void;
}
export declare class NewPendingTransactionsSubscription extends Web3Subscription<CommonSubscriptionEvents & {
    data: HexString;
}> {
    protected _buildSubscriptionParams(): ["newPendingTransactions"];
    protected _processSubscriptionResult(data: string): void;
    protected _processSubscriptionError(error: Error): void;
}
export declare class NewHeadsSubscription extends Web3Subscription<CommonSubscriptionEvents & {
    data: BlockHeaderOutput;
}> {
    protected _buildSubscriptionParams(): ["newHeads"];
    protected _processSubscriptionResult(data: BlockHeaderOutput): void;
    protected _processSubscriptionError(error: Error): void;
}
export declare class SyncingSubscription extends Web3Subscription<CommonSubscriptionEvents & {
    data: SyncOutput;
    changed: boolean;
}> {
    protected _buildSubscriptionParams(): ["syncing"];
    protected _processSubscriptionResult(data: {
        syncing: boolean;
        status: SyncOutput;
    } | boolean): void;
    protected _processSubscriptionError(error: Error): void;
}
export {};
//# sourceMappingURL=web3_subscriptions.d.ts.map