"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3Eth = exports.registeredSubscriptions = void 0;
const web3_core_1 = require("web3-core");
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const web3_rpc_methods_1 = require("web3-rpc-methods");
const rpcMethodsWrappers = __importStar(require("./rpc_method_wrappers"));
const web3_subscriptions_1 = require("./web3_subscriptions");
exports.registeredSubscriptions = {
    logs: web3_subscriptions_1.LogsSubscription,
    newPendingTransactions: web3_subscriptions_1.NewPendingTransactionsSubscription,
    newHeads: web3_subscriptions_1.NewHeadsSubscription,
    syncing: web3_subscriptions_1.SyncingSubscription,
    pendingTransactions: web3_subscriptions_1.NewPendingTransactionsSubscription,
    newBlockHeaders: web3_subscriptions_1.NewHeadsSubscription,
};
class Web3Eth extends web3_core_1.Web3Context {
    constructor(providerOrContext) {
        if (typeof providerOrContext === 'string' ||
            (0, web3_core_1.isSupportedProvider)(providerOrContext)) {
            super({
                provider: providerOrContext,
                registeredSubscriptions: exports.registeredSubscriptions,
            });
            return;
        }
        if (providerOrContext.registeredSubscriptions) {
            super(providerOrContext);
            return;
        }
        super(Object.assign(Object.assign({}, providerOrContext), { registeredSubscriptions: exports.registeredSubscriptions }));
    }
    getProtocolVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(this.requestManager);
        });
    }
    isSyncing() {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.getSyncing(this.requestManager);
        });
    }
    getCoinbase() {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.getCoinbase(this.requestManager);
        });
    }
    isMining() {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.getMining(this.requestManager);
        });
    }
    getHashrate(returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getHashRate(returnFormat);
        });
    }
    getHashRate(returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getHashRate(this, returnFormat);
        });
    }
    getGasPrice(returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getGasPrice(this, returnFormat);
        });
    }
    getAccounts() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const hexAddresses = (_a = (yield web3_rpc_methods_1.ethRpcMethods.getAccounts(this.requestManager))) !== null && _a !== void 0 ? _a : [];
            return hexAddresses.map(address => (0, web3_utils_1.toChecksumAddress)(address));
        });
    }
    getBlockNumber(returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getBlockNumber(this, returnFormat);
        });
    }
    getBalance(address, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);
        });
    }
    getStorageAt(address, storageSlot, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getStorageAt(this, address, storageSlot, blockNumber, returnFormat);
        });
    }
    getCode(address, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);
        });
    }
    getBlock(block = this.defaultBlock, hydrated = false, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);
        });
    }
    getBlockTransactionCount(block = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);
        });
    }
    getBlockUncleCount(block = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);
        });
    }
    getUncle(block = this.defaultBlock, uncleIndex, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);
        });
    }
    getTransaction(transactionHash, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield rpcMethodsWrappers.getTransaction(this, transactionHash, returnFormat);
            if (!response)
                throw new web3_errors_1.TransactionNotFound();
            return response;
        });
    }
    getPendingTransactions(returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getPendingTransactions(this, returnFormat);
        });
    }
    getTransactionFromBlock(block = this.defaultBlock, transactionIndex, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getTransactionFromBlock(this, block, transactionIndex, returnFormat);
        });
    }
    getTransactionReceipt(transactionHash, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield rpcMethodsWrappers.getTransactionReceipt(this, transactionHash, returnFormat);
            if (!response)
                throw new web3_errors_1.TransactionNotFound();
            return response;
        });
    }
    getTransactionCount(address, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);
        });
    }
    sendTransaction(transaction, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT, options) {
        return rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options);
    }
    sendSignedTransaction(transaction, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT, options) {
        return rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);
    }
    sign(message, address, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.sign(this, message, address, returnFormat);
        });
    }
    signTransaction(transaction, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);
        });
    }
    call(transaction, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);
        });
    }
    estimateGas(transaction, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);
        });
    }
    getPastLogs(filter, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getLogs(this, filter, returnFormat);
        });
    }
    getWork() {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.getWork(this.requestManager);
        });
    }
    submitWork(nonce, hash, digest) {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);
        });
    }
    requestAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.requestAccounts(this.requestManager);
        });
    }
    getChainId(returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getChainId(this, returnFormat);
        });
    }
    getNodeInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return web3_rpc_methods_1.ethRpcMethods.getNodeInfo(this.requestManager);
        });
    }
    getProof(address, storageKeys, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);
        });
    }
    getFeeHistory(blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);
        });
    }
    createAccessList(transaction, blockNumber = this.defaultBlock, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            return rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);
        });
    }
    subscribe(name, args, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const subscription = (yield ((_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe(name, args, returnFormat)));
            if (subscription instanceof web3_subscriptions_1.LogsSubscription &&
                name === 'logs' &&
                typeof args === 'object' &&
                args.fromBlock &&
                Number.isFinite(Number(args.fromBlock))) {
                setImmediate(() => {
                    this.getPastLogs(args)
                        .then(logs => {
                        for (const log of logs) {
                            subscription._processSubscriptionResult(log);
                        }
                    })
                        .catch(e => {
                        subscription._processSubscriptionError(e);
                    });
                });
            }
            return subscription;
        });
    }
    static shouldClearSubscription({ sub }) {
        return !(sub instanceof web3_subscriptions_1.SyncingSubscription);
    }
    clearSubscriptions(notClearSyncing = false) {
        var _a;
        return (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.unsubscribe(notClearSyncing ? Web3Eth.shouldClearSubscription : undefined);
    }
}
exports.Web3Eth = Web3Eth;
//# sourceMappingURL=web3_eth.js.map