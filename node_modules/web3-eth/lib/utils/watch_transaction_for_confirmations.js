"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchTransactionForConfirmations = void 0;
const web3_utils_1 = require("web3-utils");
const web3_validator_1 = require("web3-validator");
const web3_rpc_methods_1 = require("web3-rpc-methods");
const web3_errors_1 = require("web3-errors");
const schemas_1 = require("../schemas");
const watchByPolling = ({ web3Context, transactionReceipt, transactionPromiEvent, returnFormat, }) => {
    var _a;
    let confirmations = 1;
    const intervalId = setInterval(() => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            if (confirmations >= web3Context.transactionConfirmationBlocks)
                clearInterval(intervalId);
            const nextBlock = yield web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, (0, web3_utils_1.numberToHex)(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);
            if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {
                confirmations += 1;
                transactionPromiEvent.emit('confirmation', {
                    confirmations: (0, web3_utils_1.format)({ eth: 'uint' }, confirmations, returnFormat),
                    receipt: (0, web3_utils_1.format)(schemas_1.transactionReceiptSchema, transactionReceipt, returnFormat),
                    latestBlockHash: (0, web3_utils_1.format)({ eth: 'bytes32' }, nextBlock.hash, returnFormat),
                });
            }
        }))();
    }, (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval);
};
const watchBySubscription = ({ web3Context, transactionReceipt, transactionPromiEvent, returnFormat, }) => {
    let needToWatchLater = true;
    let lastCaughtBlockHash;
    setImmediate(() => {
        var _a;
        (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads').then((subscription) => {
            subscription.on('data', (newBlockHeader) => __awaiter(void 0, void 0, void 0, function* () {
                var _a;
                needToWatchLater = false;
                if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) ||
                    lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {
                    return;
                }
                lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;
                const confirmations = BigInt(newBlockHeader.number) -
                    BigInt(transactionReceipt.blockNumber) +
                    BigInt(1);
                transactionPromiEvent.emit('confirmation', {
                    confirmations: (0, web3_utils_1.format)({ eth: 'uint' }, confirmations, returnFormat),
                    receipt: (0, web3_utils_1.format)(schemas_1.transactionReceiptSchema, transactionReceipt, returnFormat),
                    latestBlockHash: (0, web3_utils_1.format)({ eth: 'bytes32' }, newBlockHeader.parentHash, returnFormat),
                });
                if (confirmations >= web3Context.transactionConfirmationBlocks) {
                    yield ((_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription));
                }
            }));
            subscription.on('error', () => __awaiter(void 0, void 0, void 0, function* () {
                var _b;
                yield ((_b = web3Context.subscriptionManager) === null || _b === void 0 ? void 0 : _b.removeSubscription(subscription));
                needToWatchLater = false;
                watchByPolling({
                    web3Context,
                    transactionReceipt,
                    transactionPromiEvent,
                    returnFormat,
                });
            }));
        }).catch(() => {
            needToWatchLater = false;
            watchByPolling({
                web3Context,
                transactionReceipt,
                transactionPromiEvent,
                returnFormat,
            });
        });
    });
    setTimeout(() => {
        if (needToWatchLater) {
            watchByPolling({
                web3Context,
                transactionReceipt,
                transactionPromiEvent,
                returnFormat,
            });
        }
    }, web3Context.blockHeaderTimeout * 1000);
};
function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat) {
    if ((0, web3_validator_1.isNullish)(transactionReceipt) || (0, web3_validator_1.isNullish)(transactionReceipt.blockHash))
        throw new web3_errors_1.TransactionMissingReceiptOrBlockHashError({
            receipt: transactionReceipt,
            blockHash: (0, web3_utils_1.format)({ eth: 'bytes32' }, transactionReceipt.blockHash, returnFormat),
            transactionHash: (0, web3_utils_1.format)({ eth: 'bytes32' }, transactionHash, returnFormat),
        });
    if (!transactionReceipt.blockNumber)
        throw new web3_errors_1.TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });
    transactionPromiEvent.emit('confirmation', {
        confirmations: (0, web3_utils_1.format)({ eth: 'uint' }, 1, returnFormat),
        receipt: (0, web3_utils_1.format)(schemas_1.transactionReceiptSchema, transactionReceipt, returnFormat),
        latestBlockHash: (0, web3_utils_1.format)({ eth: 'bytes32' }, transactionReceipt.blockHash, returnFormat),
    });
    const provider = web3Context.requestManager.provider;
    if (provider.supportsSubscriptions()) {
        watchBySubscription({
            web3Context,
            transactionReceipt,
            transactionPromiEvent,
            returnFormat,
        });
    }
    else {
        watchByPolling({
            web3Context,
            transactionReceipt,
            transactionPromiEvent,
            returnFormat,
        });
    }
}
exports.watchTransactionForConfirmations = watchTransactionForConfirmations;
//# sourceMappingURL=watch_transaction_for_confirmations.js.map