/// <reference types="node" />
import { ETH_DATA_FORMAT, FormatType, DataFormat } from 'web3-utils';
import { EthExecutionAPI, Address, HexString, Transaction, TransactionWithFromLocalWalletIndex, TransactionWithToLocalWalletIndex, TransactionWithFromAndToLocalWalletIndex, Web3NetAPI } from 'web3-types';
import { Web3Context } from 'web3-core';
export declare const getTransactionFromOrToAttr: (attr: 'from' | 'to', web3Context: Web3Context<EthExecutionAPI>, transaction?: Transaction | TransactionWithFromLocalWalletIndex | TransactionWithToLocalWalletIndex | TransactionWithFromAndToLocalWalletIndex, privateKey?: HexString | Buffer) => Address | undefined;
export declare const getTransactionNonce: <ReturnFormat extends DataFormat>(web3Context: Web3Context<EthExecutionAPI>, address?: Address, returnFormat?: ReturnFormat) => Promise<import("web3-utils").NumberTypes[ReturnFormat["number"]]>;
export declare const getTransactionType: (transaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>, web3Context: Web3Context<EthExecutionAPI>) => string | undefined;
export declare function defaultTransactionBuilder<ReturnType = Record<string, unknown>>(options: {
    transaction: Record<string, unknown>;
    web3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;
    privateKey?: HexString | Buffer;
}): Promise<ReturnType>;
export declare const transactionBuilder: <ReturnType_1 = Record<string, unknown>>(options: {
    transaction: Transaction;
    web3Context: Web3Context<EthExecutionAPI>;
    privateKey?: HexString | Buffer;
}) => Promise<ReturnType_1>;
//# sourceMappingURL=transaction_builder.d.ts.map