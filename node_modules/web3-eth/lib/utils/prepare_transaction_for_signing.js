"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareTransactionForSigning = void 0;
const common_1 = __importDefault(require("@ethereumjs/common"));
const tx_1 = require("@ethereumjs/tx");
const web3_utils_1 = require("web3-utils");
const web3_validator_1 = require("web3-validator");
const validation_1 = require("../validation");
const format_transaction_1 = require("./format_transaction");
const transaction_builder_1 = require("./transaction_builder");
const getEthereumjsTxDataFromTransaction = (transaction) => ({
    nonce: transaction.nonce,
    gasPrice: transaction.gasPrice,
    gasLimit: transaction.gasLimit,
    to: transaction.to,
    value: transaction.value,
    data: transaction.data,
    type: transaction.type,
    chainId: transaction.chainId,
    accessList: transaction.accessList,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
    maxFeePerGas: transaction.maxFeePerGas,
});
const getEthereumjsTransactionOptions = (transaction, web3Context) => {
    var _a, _b, _c, _d, _e;
    const hasTransactionSigningOptions = (!(0, web3_validator_1.isNullish)(transaction.chain) && !(0, web3_validator_1.isNullish)(transaction.hardfork)) ||
        !(0, web3_validator_1.isNullish)(transaction.common);
    let common;
    if (!hasTransactionSigningOptions) {
        if (web3Context.defaultCommon) {
            common = web3Context.defaultCommon;
            if ((0, web3_validator_1.isNullish)(common.hardfork))
                common.hardfork = (_a = transaction.hardfork) !== null && _a !== void 0 ? _a : web3Context.defaultHardfork;
            if ((0, web3_validator_1.isNullish)(common.baseChain))
                common.baseChain = web3Context.defaultChain;
        }
        else {
            common = common_1.default.custom({
                name: 'custom-network',
                chainId: (0, web3_utils_1.toNumber)(transaction.chainId),
                networkId: !(0, web3_validator_1.isNullish)(transaction.networkId)
                    ? (0, web3_utils_1.toNumber)(transaction.networkId)
                    : undefined,
                defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork,
            }, {
                baseChain: web3Context.defaultChain,
            });
        }
    }
    else if (transaction.common)
        common = common_1.default.custom({
            name: (_c = transaction.common.customChain.name) !== null && _c !== void 0 ? _c : 'custom-network',
            chainId: (0, web3_utils_1.toNumber)(transaction.common.customChain.chainId),
            networkId: (0, web3_utils_1.toNumber)(transaction.common.customChain.networkId),
            defaultHardfork: (_d = transaction.common.hardfork) !== null && _d !== void 0 ? _d : web3Context.defaultHardfork,
        }, {
            baseChain: (_e = transaction.common.baseChain) !== null && _e !== void 0 ? _e : web3Context.defaultChain,
        });
    return { common };
};
const prepareTransactionForSigning = (transaction, web3Context, privateKey) => __awaiter(void 0, void 0, void 0, function* () {
    const populatedTransaction = (yield (0, transaction_builder_1.transactionBuilder)({
        transaction,
        web3Context,
        privateKey,
    }));
    const formattedTransaction = (0, format_transaction_1.formatTransaction)(populatedTransaction, web3_utils_1.ETH_DATA_FORMAT);
    (0, validation_1.validateTransactionForSigning)(formattedTransaction);
    return tx_1.TransactionFactory.fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));
});
exports.prepareTransactionForSigning = prepareTransactionForSigning;
//# sourceMappingURL=prepare_transaction_for_signing.js.map