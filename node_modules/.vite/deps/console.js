import {
  require_assert
} from "./chunk-YECH67U4.js";
import {
  require_util
} from "./chunk-ADFCGXJK.js";
import {
  __commonJS,
  _global,
  init_shim
} from "./chunk-Y37MGS27.js";

// node_modules/console-browserify/index.js
var require_console_browserify = __commonJS({
  "node_modules/console-browserify/index.js"(exports, module) {
    init_shim();
    var util = require_util();
    var assert = require_assert();
    function now() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    var slice = Array.prototype.slice;
    var console;
    var times = {};
    if (typeof _global !== "undefined" && _global.console) {
      console = _global.console;
    } else if (typeof window !== "undefined" && window.console) {
      console = window.console;
    } else {
      console = {};
    }
    var functions = [
      [log, "log"],
      [info, "info"],
      [warn, "warn"],
      [error, "error"],
      [time, "time"],
      [timeEnd, "timeEnd"],
      [trace, "trace"],
      [dir, "dir"],
      [consoleAssert, "assert"]
    ];
    for (i = 0; i < functions.length; i++) {
      tuple = functions[i];
      f = tuple[0];
      name = tuple[1];
      if (!console[name]) {
        console[name] = f;
      }
    }
    var tuple;
    var f;
    var name;
    var i;
    module.exports = console;
    function log() {
    }
    function info() {
      console.log.apply(console, arguments);
    }
    function warn() {
      console.log.apply(console, arguments);
    }
    function error() {
      console.warn.apply(console, arguments);
    }
    function time(label) {
      times[label] = now();
    }
    function timeEnd(label) {
      var time2 = times[label];
      if (!time2) {
        throw new Error("No such label: " + label);
      }
      delete times[label];
      var duration = now() - time2;
      console.log(label + ": " + duration + "ms");
    }
    function trace() {
      var err = new Error();
      err.name = "Trace";
      err.message = util.format.apply(null, arguments);
      console.error(err.stack);
    }
    function dir(object) {
      console.log(util.inspect(object) + "\n");
    }
    function consoleAssert(expression) {
      if (!expression) {
        var arr = slice.call(arguments, 1);
        assert.ok(false, util.format.apply(null, arr));
      }
    }
  }
});
export default require_console_browserify();
//# sourceMappingURL=console.js.map
