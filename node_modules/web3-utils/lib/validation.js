"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNullish = exports.compareBlockNumbers = exports.isTopicInBloom = exports.isTopic = exports.isContractAddressInBloom = exports.isUserEthereumAddressInBloom = exports.isInBloom = exports.isBloom = exports.isAddress = exports.checkAddressCheckSum = exports.isHex = exports.isHexStrict = void 0;
const web3_errors_1 = require("web3-errors");
const web3_validator_1 = require("web3-validator");
const web3_types_1 = require("web3-types");
exports.isHexStrict = web3_validator_1.isHexStrict;
exports.isHex = web3_validator_1.isHex;
exports.checkAddressCheckSum = web3_validator_1.checkAddressCheckSum;
exports.isAddress = web3_validator_1.isAddress;
exports.isBloom = web3_validator_1.isBloom;
exports.isInBloom = web3_validator_1.isInBloom;
exports.isUserEthereumAddressInBloom = web3_validator_1.isUserEthereumAddressInBloom;
exports.isContractAddressInBloom = web3_validator_1.isContractAddressInBloom;
exports.isTopic = web3_validator_1.isTopic;
exports.isTopicInBloom = web3_validator_1.isTopicInBloom;
const compareBlockNumbers = (blockA, blockB) => {
    const isABlockTag = typeof blockA === 'string' && (0, web3_validator_1.isBlockTag)(blockA);
    const isBBlockTag = typeof blockB === 'string' && (0, web3_validator_1.isBlockTag)(blockB);
    if (blockA === blockB ||
        ((blockA === 'earliest' || blockA === 0) && (blockB === 'earliest' || blockB === 0))) {
        return 0;
    }
    if (blockA === 'earliest' && blockB > 0) {
        return -1;
    }
    if (blockB === 'earliest' && blockA > 0) {
        return 1;
    }
    if (isABlockTag && isBBlockTag) {
        const tagsOrder = {
            [web3_types_1.BlockTags.EARLIEST]: 1,
            [web3_types_1.BlockTags.FINALIZED]: 2,
            [web3_types_1.BlockTags.SAFE]: 3,
            [web3_types_1.BlockTags.LATEST]: 4,
            [web3_types_1.BlockTags.PENDING]: 5,
        };
        if (tagsOrder[blockA] < tagsOrder[blockB]) {
            return -1;
        }
        return 1;
    }
    if ((isABlockTag && !isBBlockTag) || (!isABlockTag && isBBlockTag)) {
        throw new web3_errors_1.InvalidBlockError('Cannot compare blocktag with provided non-blocktag input.');
    }
    const bigIntA = BigInt(blockA);
    const bigIntB = BigInt(blockB);
    if (bigIntA < bigIntB) {
        return -1;
    }
    if (bigIntA === bigIntB) {
        return 0;
    }
    return 1;
};
exports.compareBlockNumbers = compareBlockNumbers;
exports.isNullish = web3_validator_1.isNullish;
//# sourceMappingURL=validation.js.map