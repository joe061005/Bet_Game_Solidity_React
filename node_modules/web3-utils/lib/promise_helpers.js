"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rejectIfConditionAtInterval = exports.rejectIfTimeout = exports.pollTillDefined = exports.waitWithTimeout = exports.isPromise = void 0;
const web3_validator_1 = require("web3-validator");
function isPromise(object) {
    return ((typeof object === 'object' || typeof object === 'function') &&
        typeof object.then === 'function');
}
exports.isPromise = isPromise;
function waitWithTimeout(awaitable, timeout, error) {
    return __awaiter(this, void 0, void 0, function* () {
        let timeoutId;
        const result = yield Promise.race([
            awaitable instanceof Promise ? awaitable : awaitable(),
            new Promise((resolve, reject) => {
                timeoutId = setTimeout(() => (error ? reject(error) : resolve(undefined)), timeout);
            }),
        ]);
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        if (result instanceof Error) {
            throw result;
        }
        return result;
    });
}
exports.waitWithTimeout = waitWithTimeout;
function pollTillDefined(func, interval) {
    return __awaiter(this, void 0, void 0, function* () {
        const awaitableRes = waitWithTimeout(func, interval);
        let intervalId;
        const polledRes = new Promise((resolve, reject) => {
            intervalId = setInterval(() => {
                (() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const res = yield waitWithTimeout(func, interval);
                        if (!(0, web3_validator_1.isNullish)(res)) {
                            clearInterval(intervalId);
                            resolve(res);
                        }
                    }
                    catch (error) {
                        clearInterval(intervalId);
                        reject(error);
                    }
                }))();
            }, interval);
        });
        const res = yield awaitableRes;
        if (!(0, web3_validator_1.isNullish)(res)) {
            if (intervalId) {
                clearInterval(intervalId);
            }
            return res;
        }
        return polledRes;
    });
}
exports.pollTillDefined = pollTillDefined;
function rejectIfTimeout(timeout, error) {
    let timeoutId;
    const rejectOnTimeout = new Promise((_, reject) => {
        timeoutId = setTimeout(() => {
            reject(error);
        }, timeout);
    });
    return [timeoutId, rejectOnTimeout];
}
exports.rejectIfTimeout = rejectIfTimeout;
function rejectIfConditionAtInterval(cond, interval) {
    let intervalId;
    const rejectIfCondition = new Promise((_, reject) => {
        intervalId = setInterval(() => {
            (() => __awaiter(this, void 0, void 0, function* () {
                const error = yield cond();
                if (error) {
                    clearInterval(intervalId);
                    reject(error);
                }
            }))();
        }, interval);
    });
    return [intervalId, rejectIfCondition];
}
exports.rejectIfConditionAtInterval = rejectIfConditionAtInterval;
//# sourceMappingURL=promise_helpers.js.map