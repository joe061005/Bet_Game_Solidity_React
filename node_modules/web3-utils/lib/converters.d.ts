/// <reference types="node" />
import { Address, Bytes, HexString, Numbers, ValueTypes } from 'web3-types';
export declare const ethUnitMap: {
    noether: bigint;
    wei: bigint;
    kwei: bigint;
    Kwei: bigint;
    babbage: bigint;
    femtoether: bigint;
    mwei: bigint;
    Mwei: bigint;
    lovelace: bigint;
    picoether: bigint;
    gwei: bigint;
    Gwei: bigint;
    shannon: bigint;
    nanoether: bigint;
    nano: bigint;
    szabo: bigint;
    microether: bigint;
    micro: bigint;
    finney: bigint;
    milliether: bigint;
    milli: bigint;
    ether: bigint;
    kether: bigint;
    grand: bigint;
    mether: bigint;
    gether: bigint;
    tether: bigint;
};
export declare type EtherUnits = keyof typeof ethUnitMap;
export declare const bytesToBuffer: (data: Bytes) => Buffer | never;
export declare const bytesToHex: (bytes: Bytes) => HexString;
export declare const hexToBytes: (bytes: HexString) => Buffer;
export declare const hexToNumber: (value: HexString) => bigint | number;
export declare const toDecimal: (value: HexString) => bigint | number;
export declare const numberToHex: (value: Numbers) => HexString;
export declare const fromDecimal: (value: Numbers) => HexString;
export declare const hexToNumberString: (data: HexString) => string;
export declare const utf8ToHex: (str: string) => HexString;
export declare const fromUtf8: (str: string) => HexString;
export declare const stringToHex: (str: string) => HexString;
export declare const hexToUtf8: (str: HexString) => string;
export declare const toUtf8: (str: HexString) => string;
export declare const hexToString: (str: HexString) => string;
export declare const asciiToHex: (str: string) => HexString;
export declare const fromAscii: (str: string) => HexString;
export declare const hexToAscii: (str: HexString) => string;
export declare const toAscii: (str: HexString) => string;
export declare const toHex: (value: Numbers | Bytes | Address | boolean | object, returnType?: boolean) => HexString | ValueTypes;
export declare const toNumber: (value: Numbers) => number | bigint;
export declare const toBigInt: (value: unknown) => bigint;
export declare const fromWei: (number: Numbers, unit: EtherUnits) => string;
export declare const toWei: (number: Numbers, unit: EtherUnits) => string;
export declare const toChecksumAddress: (address: Address) => string;
//# sourceMappingURL=converters.d.ts.map