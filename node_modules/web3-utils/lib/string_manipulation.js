"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromTwosComplement = exports.toTwosComplement = exports.leftPad = exports.rightPad = exports.padRight = exports.padLeft = void 0;
const web3_errors_1 = require("web3-errors");
const web3_validator_1 = require("web3-validator");
const converters_1 = require("./converters");
const padLeft = (value, characterAmount, sign = '0') => {
    if (typeof value === 'string' && !(0, web3_validator_1.isHexStrict)(value)) {
        return value.padStart(characterAmount, sign);
    }
    web3_validator_1.validator.validate(['int'], [value]);
    return web3_validator_1.utils.padLeft(value, characterAmount, sign);
};
exports.padLeft = padLeft;
const padRight = (value, characterAmount, sign = '0') => {
    if (typeof value === 'string' && !(0, web3_validator_1.isHexStrict)(value)) {
        return value.padEnd(characterAmount, sign);
    }
    web3_validator_1.validator.validate(['int'], [value]);
    const hexString = typeof value === 'string' && (0, web3_validator_1.isHexStrict)(value) ? value : (0, converters_1.numberToHex)(value);
    const prefixLength = hexString.startsWith('-') ? 3 : 2;
    return hexString.padEnd(characterAmount + prefixLength, sign);
};
exports.padRight = padRight;
exports.rightPad = exports.padRight;
exports.leftPad = exports.padLeft;
const toTwosComplement = (value, nibbleWidth = 64) => {
    web3_validator_1.validator.validate(['int'], [value]);
    const val = (0, converters_1.toNumber)(value);
    if (val >= 0)
        return (0, exports.padLeft)((0, converters_1.toHex)(val), nibbleWidth);
    const largestBit = BigInt(2) ** BigInt(nibbleWidth * 4);
    if (-val >= largestBit) {
        throw new web3_errors_1.NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);
    }
    const updatedVal = BigInt(val);
    const complement = updatedVal + largestBit;
    return (0, exports.padLeft)((0, converters_1.numberToHex)(complement), nibbleWidth);
};
exports.toTwosComplement = toTwosComplement;
const fromTwosComplement = (value, nibbleWidth = 64) => {
    web3_validator_1.validator.validate(['int'], [value]);
    const val = (0, converters_1.toNumber)(value);
    if (val < 0)
        return val;
    const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));
    if (largestBit > nibbleWidth * 4)
        throw new web3_errors_1.NibbleWidthError(`value: "${value}", nibbleWidth: "${nibbleWidth}"`);
    if (nibbleWidth * 4 !== largestBit)
        return val;
    const complement = BigInt(2) ** (BigInt(nibbleWidth) * BigInt(4));
    return (0, converters_1.toNumber)(BigInt(val) - complement);
};
exports.fromTwosComplement = fromTwosComplement;
//# sourceMappingURL=string_manipulation.js.map