import { Web3DeferredPromiseInterface } from 'web3-types';
export declare class Web3DeferredPromise<T> implements Promise<T>, Web3DeferredPromiseInterface<T> {
    [Symbol.toStringTag]: 'Promise';
    private readonly _promise;
    private _resolve;
    private _reject;
    private _state;
    private _timeoutId?;
    private readonly _timeoutInterval?;
    private readonly _timeoutMessage;
    constructor({ timeout, eagerStart, timeoutMessage, }?: {
        timeout: number;
        eagerStart: boolean;
        timeoutMessage: string;
    });
    get state(): 'pending' | 'fulfilled' | 'rejected';
    then<TResult1, TResult2>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: unknown) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2>;
    catch<TResult>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<T | TResult>;
    finally(onfinally?: (() => void) | undefined): Promise<T>;
    resolve(value: T | PromiseLike<T>): void;
    reject(reason?: unknown): void;
    startTimer(): void;
    private _checkTimeout;
    private _clearTimeout;
}
//# sourceMappingURL=web3_deferred_promise.d.ts.map