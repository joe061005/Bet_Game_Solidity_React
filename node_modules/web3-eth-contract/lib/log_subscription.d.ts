import { AbiEventFragment, LogsInput, HexString, Topic } from 'web3-types';
import { Web3RequestManager, Web3Subscription } from 'web3-core';
import { DataFormat } from 'web3-utils';
import { ContractAbiWithSignature, EventLog } from './types';
export declare class LogsSubscription extends Web3Subscription<{
    error: Error;
    connected: number;
    data: EventLog;
    changed: EventLog & {
        removed: true;
    };
}, {
    address?: HexString;
    topics?: (Topic | Topic[])[];
    abi: AbiEventFragment;
}> {
    readonly address?: HexString;
    readonly topics?: (Topic | Topic[])[];
    readonly abi: AbiEventFragment & {
        signature: HexString;
    };
    readonly jsonInterface: ContractAbiWithSignature;
    constructor(args: {
        address?: HexString;
        topics?: (Topic | Topic[])[];
        abi: AbiEventFragment & {
            signature: HexString;
        };
        jsonInterface: ContractAbiWithSignature;
    }, options: {
        requestManager: Web3RequestManager;
        returnFormat?: DataFormat;
    });
    protected _buildSubscriptionParams(): ["logs", {
        address?: string | undefined;
        topics?: string[] | undefined;
    }];
    protected _processSubscriptionResult(data: LogsInput): void;
}
//# sourceMappingURL=log_subscription.d.ts.map