"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeMethodReturn = exports.encodeMethodABI = exports.decodeEventABI = exports.encodeEventABI = void 0;
const web3_utils_1 = require("web3-utils");
const web3_eth_abi_1 = require("web3-eth-abi");
const web3_eth_1 = require("web3-eth");
const web3_errors_1 = require("web3-errors");
const encodeEventABI = ({ address }, event, options) => {
    var _a, _b;
    const opts = {
        filter: (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {},
    };
    if (!(0, web3_utils_1.isNullish)(options === null || options === void 0 ? void 0 : options.fromBlock)) {
        opts.fromBlock = (0, web3_utils_1.format)(web3_eth_1.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {
            number: web3_utils_1.FMT_NUMBER.HEX,
            bytes: web3_utils_1.FMT_BYTES.HEX,
        });
    }
    if (!(0, web3_utils_1.isNullish)(options === null || options === void 0 ? void 0 : options.toBlock)) {
        opts.toBlock = (0, web3_utils_1.format)(web3_eth_1.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {
            number: web3_utils_1.FMT_NUMBER.HEX,
            bytes: web3_utils_1.FMT_BYTES.HEX,
        });
    }
    if ((options === null || options === void 0 ? void 0 : options.topics) && Array.isArray(options.topics)) {
        opts.topics = [...options.topics].filter(Boolean);
    }
    else {
        opts.topics = [];
        if (event && !event.anonymous && event.name !== 'ALLEVENTS') {
            opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : (0, web3_eth_abi_1.encodeEventSignature)((0, web3_eth_abi_1.jsonInterfaceMethodToString)(event)));
        }
        if (event.name !== 'ALLEVENTS' && event.inputs) {
            for (const input of event.inputs) {
                if (!input.indexed) {
                    continue;
                }
                const value = opts.filter[input.name];
                if (!value) {
                    continue;
                }
                if (Array.isArray(value)) {
                    opts.topics.push(...value.map(v => (0, web3_eth_abi_1.encodeParameter)(input.type, v)));
                }
                opts.topics.push((0, web3_eth_abi_1.encodeParameter)(input.type, value));
            }
        }
    }
    if (!opts.topics.length)
        delete opts.topics;
    if (address) {
        opts.address = address.toLowerCase();
    }
    return opts;
};
exports.encodeEventABI = encodeEventABI;
const decodeEventABI = (event, data, jsonInterface, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) => {
    var _a, _b, _c, _d, _e;
    let modifiedEvent = Object.assign({}, event);
    const result = (0, web3_utils_1.format)(web3_eth_1.logSchema, data, returnFormat);
    if (modifiedEvent.name === 'ALLEVENTS') {
        const matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);
        if (matchedEvent) {
            modifiedEvent = matchedEvent;
        }
        else {
            modifiedEvent = { anonymous: true };
        }
    }
    modifiedEvent.inputs = (_b = (_a = modifiedEvent.inputs) !== null && _a !== void 0 ? _a : event.inputs) !== null && _b !== void 0 ? _b : [];
    if (!modifiedEvent.anonymous) {
        let indexedInputs = 0;
        ((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach(input => {
            if (input.indexed) {
                indexedInputs += 1;
            }
        });
        if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) {
            modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), { anonymous: true, inputs: [] });
        }
    }
    const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);
    return Object.assign(Object.assign({}, result), { returnValues: (0, web3_eth_abi_1.decodeLog)([...((_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : [])], data.data, argTopics), event: modifiedEvent.name, signature: modifiedEvent.anonymous || !data.topics || data.topics.length === 0 || !data.topics[0]
            ? undefined
            : data.topics[0], raw: {
            data: data.data,
            topics: data.topics,
        } });
};
exports.decodeEventABI = decodeEventABI;
const encodeMethodABI = (abi, args, deployData) => {
    const inputLength = Array.isArray(abi.inputs) ? abi.inputs.length : 0;
    if (inputLength !== args.length) {
        throw new web3_errors_1.Web3ContractError(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);
    }
    const params = (0, web3_eth_abi_1.encodeParameters)(Array.isArray(abi.inputs) ? abi.inputs : [], args).replace('0x', '');
    if ((0, web3_eth_abi_1.isAbiConstructorFragment)(abi)) {
        if (!deployData)
            throw new web3_errors_1.Web3ContractError('The contract has no contract data option set. This is necessary to append the constructor parameters.');
        if (!deployData.startsWith('0x')) {
            return `0x${deployData}${params}`;
        }
        return `${deployData}${params}`;
    }
    return `${(0, web3_eth_abi_1.encodeFunctionSignature)(abi)}${params}`;
};
exports.encodeMethodABI = encodeMethodABI;
const decodeMethodReturn = (abi, returnValues) => {
    if (abi.type === 'constructor') {
        return returnValues;
    }
    if (!returnValues) {
        return null;
    }
    const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
    if (!abi.outputs) {
        return null;
    }
    const result = (0, web3_eth_abi_1.decodeParameters)([...abi.outputs], value);
    if (result.__length__ === 1) {
        return result[0];
    }
    return result;
};
exports.decodeMethodReturn = decodeMethodReturn;
//# sourceMappingURL=encoding.js.map