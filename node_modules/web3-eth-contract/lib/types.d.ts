import { Web3ContextInitOptions, Web3PromiEvent } from 'web3-core';
import { NewHeadsSubscription, SendTransactionEvents } from 'web3-eth';
import { AccessListResult, AbiFragment, Address, BlockNumberOrTag, Bytes, ContractAbi, EthExecutionAPI, HexString, HexString32Bytes, Numbers, SupportedProviders, TransactionReceipt, Uint } from 'web3-types';
import { DataFormat, DEFAULT_RETURN_FORMAT, FormatType } from 'web3-utils';
import { LogsSubscription } from './log_subscription';
export type { TransactionReceipt } from 'web3-types';
export declare type ContractAbiWithSignature = ReadonlyArray<AbiFragment & {
    signature: HexString;
}>;
export interface EventLog {
    readonly event: string;
    readonly id?: string;
    readonly logIndex?: bigint | number | string;
    readonly transactionIndex?: bigint | number | string;
    readonly transactionHash?: HexString32Bytes;
    readonly blockHash?: HexString32Bytes;
    readonly blockNumber?: bigint | number | string;
    readonly address: string;
    readonly topics: HexString[];
    readonly data: HexString;
    readonly raw?: {
        data: string;
        topics: unknown[];
    };
    readonly returnValues: Record<string, unknown>;
    readonly signature?: HexString;
}
export interface ContractEventOptions {
    filter?: Record<string, unknown>;
    fromBlock?: BlockNumberOrTag;
    topics?: string[];
}
export interface ContractOptions {
    readonly gas?: Uint;
    readonly gasPrice?: Uint;
    readonly gasLimit?: Uint;
    readonly from?: Address;
    readonly data?: Bytes;
    get jsonInterface(): ContractAbiWithSignature;
    set jsonInterface(value: ContractAbi);
    address?: Address;
}
export interface ContractInitOptions {
    readonly gas?: Uint;
    readonly gasPrice?: Uint;
    readonly from?: Address;
    readonly data?: Bytes;
    readonly gasLimit?: Uint;
    readonly provider?: SupportedProviders<EthExecutionAPI> | string;
    readonly syncWithContext?: boolean;
}
export interface NonPayableCallOptions {
    nonce?: HexString;
    chainId?: HexString;
    from?: Address;
    to?: Address;
    data?: HexString;
    gas?: string;
    maxPriorityFeePerGas?: HexString;
    maxFeePerGas?: HexString;
    gasPrice?: string;
    type?: string | number;
}
export interface PayableCallOptions extends NonPayableCallOptions {
    value?: string;
}
export declare type NonPayableTxOptions = NonPayableCallOptions;
export declare type PayableTxOptions = PayableCallOptions;
export interface NonPayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {
    arguments: Inputs;
    call<SpecialOutput = Outputs>(tx?: NonPayableCallOptions, block?: BlockNumberOrTag): Promise<SpecialOutput>;
    send(tx?: NonPayableTxOptions): Web3PromiEvent<FormatType<TransactionReceipt, typeof DEFAULT_RETURN_FORMAT>, SendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>>;
    estimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(options?: NonPayableCallOptions, returnFormat?: ReturnFormat): Promise<FormatType<Numbers, ReturnFormat>>;
    encodeABI(): string;
    createAccessList(tx?: NonPayableCallOptions, block?: BlockNumberOrTag): Promise<AccessListResult>;
}
export interface PayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {
    arguments: Inputs;
    call<SpecialOutput = Outputs>(tx?: PayableCallOptions, block?: BlockNumberOrTag): Promise<SpecialOutput>;
    send(tx?: PayableTxOptions): Web3PromiEvent<FormatType<TransactionReceipt, typeof DEFAULT_RETURN_FORMAT>, SendTransactionEvents<typeof DEFAULT_RETURN_FORMAT>>;
    estimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(options?: PayableCallOptions, returnFormat?: ReturnFormat): Promise<FormatType<Numbers, ReturnFormat>>;
    encodeABI(): HexString;
    createAccessList(tx?: NonPayableCallOptions, block?: BlockNumberOrTag): Promise<AccessListResult>;
}
export declare type Web3ContractContext = Partial<Web3ContextInitOptions<EthExecutionAPI, {
    logs: typeof LogsSubscription;
    newHeads: typeof NewHeadsSubscription;
    newBlockHeaders: typeof NewHeadsSubscription;
}>>;
//# sourceMappingURL=types.d.ts.map