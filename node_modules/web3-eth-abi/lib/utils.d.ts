import { AbiCoder } from '@ethersproject/abi';
import { AbiInput, AbiCoderStruct, AbiFragment, AbiParameter, AbiStruct, AbiEventFragment, AbiFunctionFragment, AbiConstructorFragment } from 'web3-types';
export declare const isAbiFragment: (item: unknown) => item is AbiFragment;
export declare const isAbiErrorFragment: (item: unknown) => item is AbiEventFragment;
export declare const isAbiEventFragment: (item: unknown) => item is AbiEventFragment;
export declare const isAbiFunctionFragment: (item: unknown) => item is AbiFunctionFragment;
export declare const isAbiConstructorFragment: (item: unknown) => item is AbiConstructorFragment;
export declare const isSimplifiedStructFormat: (type: string | Partial<AbiParameter> | Partial<AbiInput>) => type is Omit<AbiParameter, "name" | "components">;
export declare const mapStructNameAndType: (structName: string) => AbiStruct;
export declare const mapStructToCoderFormat: (struct: AbiStruct) => Array<AbiCoderStruct>;
export declare const mapTypes: (types: AbiInput[]) => Array<string | AbiParameter | Record<string, unknown>>;
export declare const isOddHexstring: (param: unknown) => boolean;
export declare const formatOddHexstrings: (param: string) => string;
export declare const formatParam: (type: string, _param: unknown) => unknown;
export declare const modifyParams: (coder: ReturnType<AbiCoder['_getCoder']>, param: unknown[]) => unknown;
export declare const flattenTypes: (includeTuple: boolean, puts: ReadonlyArray<AbiParameter>) => string[];
export declare const jsonInterfaceMethodToString: (json: AbiFragment) => string;
//# sourceMappingURL=utils.d.ts.map