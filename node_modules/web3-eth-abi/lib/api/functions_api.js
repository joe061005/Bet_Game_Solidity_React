"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeFunctionCall = exports.encodeFunctionSignature = void 0;
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const utils_1 = require("../utils");
const parameters_api_1 = require("./parameters_api");
const encodeFunctionSignature = (functionName) => {
    if (typeof functionName !== 'string' && !(0, utils_1.isAbiFunctionFragment)(functionName)) {
        throw new web3_errors_1.AbiError('Invalid parameter value in encodeFunctionSignature');
    }
    let name;
    if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {
        name = (0, utils_1.jsonInterfaceMethodToString)(functionName);
    }
    else {
        name = functionName;
    }
    return (0, web3_utils_1.sha3Raw)(name).slice(0, 10);
};
exports.encodeFunctionSignature = encodeFunctionSignature;
const encodeFunctionCall = (jsonInterface, params) => {
    var _a;
    if (!(0, utils_1.isAbiFunctionFragment)(jsonInterface)) {
        throw new web3_errors_1.AbiError('Invalid parameter value in encodeFunctionCall');
    }
    return `${(0, exports.encodeFunctionSignature)(jsonInterface)}${(0, parameters_api_1.encodeParameters)((_a = jsonInterface.inputs) !== null && _a !== void 0 ? _a : [], params !== null && params !== void 0 ? params : []).replace('0x', '')}`;
};
exports.encodeFunctionCall = encodeFunctionCall;
//# sourceMappingURL=functions_api.js.map