"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Registry = void 0;
const web3_eth_contract_1 = require("web3-eth-contract");
const web3_utils_1 = require("web3-utils");
const ENSRegistry_1 = require("./abi/ens/ENSRegistry");
const PublicResolver_1 = require("./abi/ens/PublicResolver");
const config_1 = require("./config");
const utils_1 = require("./utils");
class Registry {
    constructor(context, customRegistryAddress) {
        this.contract = new web3_eth_contract_1.Contract(ENSRegistry_1.ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : config_1.registryAddresses.main, context);
        this.context = context;
    }
    getOwner(name) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = this.contract.methods.owner((0, utils_1.namehash)(name)).call();
                return result;
            }
            catch (error) {
                throw new Error();
            }
        });
    }
    setOwner(name, address, txConfig, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        try {
            const receipt = this.contract.methods
                .setOwner((0, utils_1.namehash)(name), (0, web3_utils_1.format)({ eth: 'address' }, address, returnFormat))
                .send(txConfig);
            return receipt;
        }
        catch (error) {
            throw new Error();
        }
    }
    getTTL(name) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.contract.methods.ttl((0, utils_1.namehash)(name)).call();
            }
            catch (error) {
                throw new Error();
            }
        });
    }
    setTTL(name, ttl, txConfig) {
        try {
            const promiEvent = this.contract.methods.setTTL((0, utils_1.namehash)(name), ttl).send(txConfig);
            return promiEvent;
        }
        catch (error) {
            throw new Error();
        }
    }
    setSubnodeOwner(node, label, address, txConfig, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        const hexStrictLabel = !(0, web3_utils_1.isHexStrict)(label) ? (0, web3_utils_1.sha3Raw)(label) : label;
        try {
            const receipt = this.contract.methods
                .setSubnodeOwner((0, utils_1.namehash)(node), hexStrictLabel, (0, web3_utils_1.format)({ eth: 'address' }, address, returnFormat))
                .send(txConfig);
            return receipt;
        }
        catch (error) {
            throw new Error();
        }
    }
    setSubnodeRecord(name, label, owner, resolver, ttl, txConfig, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        const hexStrictLabel = !(0, web3_utils_1.isHexStrict)(label) ? (0, web3_utils_1.sha3Raw)(label) : label;
        try {
            const receipt = this.contract.methods
                .setSubnodeRecord((0, utils_1.namehash)(name), hexStrictLabel, (0, web3_utils_1.format)({ eth: 'address' }, owner, returnFormat), (0, web3_utils_1.format)({ eth: 'address' }, resolver, returnFormat), ttl)
                .send(txConfig);
            return receipt;
        }
        catch (error) {
            throw new Error();
        }
    }
    setApprovalForAll(operator, approved, txConfig) {
        try {
            const receipt = this.contract.methods
                .setApprovalForAll(operator, approved)
                .send(txConfig);
            return receipt;
        }
        catch (error) {
            throw new Error();
        }
    }
    isApprovedForAll(owner, operator, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const result = this.contract.methods
                    .isApprovedForAll((0, web3_utils_1.format)({ eth: 'address' }, owner, returnFormat), (0, web3_utils_1.format)({ eth: 'address' }, operator, returnFormat))
                    .call();
                return result;
            }
            catch (error) {
                throw new Error();
            }
        });
    }
    recordExists(name) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const promise = this.contract.methods.recordExists((0, utils_1.namehash)(name)).call();
                return promise;
            }
            catch (error) {
                throw new Error();
            }
        });
    }
    getResolver(name) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.contract.methods
                    .resolver((0, utils_1.namehash)(name))
                    .call()
                    .then(address => {
                    if (typeof address === 'string') {
                        const contract = new web3_eth_contract_1.Contract(PublicResolver_1.PublicResolverAbi, address, this.context);
                        return contract;
                    }
                    throw new Error();
                });
            }
            catch (error) {
                throw new Error();
            }
        });
    }
    setResolver(name, address, txConfig, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        try {
            return this.contract.methods
                .setResolver((0, utils_1.namehash)(name), (0, web3_utils_1.format)({ eth: 'address' }, address, returnFormat))
                .send(txConfig);
        }
        catch (error) {
            throw new Error();
        }
    }
    setRecord(name, owner, resolver, ttl, txConfig, returnFormat = web3_utils_1.DEFAULT_RETURN_FORMAT) {
        try {
            return this.contract.methods
                .setRecord((0, utils_1.namehash)(name), (0, web3_utils_1.format)({ eth: 'address' }, owner, returnFormat), (0, web3_utils_1.format)({ eth: 'address' }, resolver, returnFormat), ttl)
                .send(txConfig);
        }
        catch (error) {
            throw new Error();
        }
    }
    get events() {
        return this.contract.events;
    }
}
exports.Registry = Registry;
//# sourceMappingURL=registry.js.map