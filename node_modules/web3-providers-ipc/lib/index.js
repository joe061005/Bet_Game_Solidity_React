"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpcProvider = void 0;
const net_1 = require("net");
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const fs_1 = require("fs");
class IpcProvider extends web3_utils_1.SocketProvider {
    getStatus() {
        var _a;
        if ((_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.connecting) {
            return 'connecting';
        }
        return this._connectionStatus;
    }
    _openSocketConnection() {
        if (!(0, fs_1.existsSync)(this._socketPath)) {
            throw new web3_errors_1.InvalidClientError(this._socketPath);
        }
        if (!this._socketConnection || this.getStatus() === 'disconnected') {
            this._socketConnection = new net_1.Socket(this._socketOptions);
        }
        this._socketConnection.connect({ path: this._socketPath });
    }
    _closeSocketConnection(code, data) {
        var _a;
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.end(() => {
            this._onDisconnect(code, data);
        });
    }
    _sendToSocket(payload) {
        var _a;
        if (this.getStatus() === 'disconnected') {
            throw new web3_errors_1.ConnectionNotOpenError();
        }
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.write(JSON.stringify(payload));
    }
    _parseResponses(e) {
        return this.chunkResponseParser.parseResponse(typeof e === 'string' ? e : e.toString('utf8'));
    }
    _addSocketListeners() {
        var _a, _b, _c, _d, _e, _f, _g;
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.on('data', this._onMessageHandler);
        (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.on('connect', this._onOpenHandler);
        (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.on('close', this._onClose.bind(this));
        (_d = this._socketConnection) === null || _d === void 0 ? void 0 : _d.on('end', this._onCloseHandler);
        let errorListeners;
        try {
            errorListeners = (_e = this._socketConnection) === null || _e === void 0 ? void 0 : _e.listeners('error');
        }
        catch (error) {
            (_f = this._socketConnection) === null || _f === void 0 ? void 0 : _f.on('error', this._onErrorHandler);
            return;
        }
        if (!errorListeners || errorListeners.length === 0) {
            (_g = this._socketConnection) === null || _g === void 0 ? void 0 : _g.on('error', this._onErrorHandler);
        }
    }
    _removeSocketListeners() {
        var _a, _b, _c, _d;
        (_a = this._socketConnection) === null || _a === void 0 ? void 0 : _a.removeAllListeners('connect');
        (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.removeAllListeners('end');
        (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.removeAllListeners('close');
        (_d = this._socketConnection) === null || _d === void 0 ? void 0 : _d.removeAllListeners('data');
    }
    _onCloseEvent(event) {
        if (!event && this._reconnectOptions.autoReconnect) {
            this._connectionStatus = 'disconnected';
            this._reconnect();
            return;
        }
        this._clearQueues(event);
        this._removeSocketListeners();
        this._onDisconnect(event === null || event === void 0 ? void 0 : event.code, event === null || event === void 0 ? void 0 : event.reason);
    }
    _onClose(event) {
        this._clearQueues(event);
        this._removeSocketListeners();
    }
}
exports.default = IpcProvider;
exports.IpcProvider = IpcProvider;
//# sourceMappingURL=index.js.map